# Source code size mod 2**32: 4714 bytes
# Method Name:       <module>
# Filename:          simple_source/03_big_dict.py
# Argument count:    0
# Kw-only arguments: 0
# Number of locals:  0
# Stack size:        115
# Flags:             0x00000040 (NOFREE)
# First Line:        2
# Constants:
#    0: <class 'str'>	'+'
#    1: <class 'str'>	'-'
#    2: <class 'str'>	'*'
#    3: <class 'str'>	'/'
#    4: <class 'str'>	'@'
#    5: <class 'str'>	'//'
#    6: <class 'str'>	'%%'
#    7: <class 'str'>	'**'
#    8: <class 'str'>	'<<'
#    9: <class 'str'>	'>>'
#   10: <class 'str'>	'&'
#   11: <class 'str'>	'|'
#   12: <class 'str'>	'^'
#   13: <class 'str'>	'+='
#   14: <class 'str'>	'-='
#   15: <class 'str'>	'*='
#   16: <class 'str'>	'@='
#   17: <class 'str'>	'/='
#   18: <class 'str'>	'//='
#   19: <class 'str'>	'%%='
#   20: <class 'str'>	'**='
#   21: <class 'str'>	'<<='
#   22: <class 'str'>	'>>='
#   23: <class 'str'>	'&='
#   24: <class 'str'>	'|='
#   25: <class 'str'>	'^='
#   26: <class 'str'>	'%c %c %c'
#   27: <class 'int'>	0
#   28: <class 'int'>	1
#   29: <class 'str'>	'~%c'
#   30: <class 'str'>	'%c%c'
#   31: <class 'str'>	'not %c'
#   32: <class 'str'>	'`%c`'
#   33: <class 'str'>	'iter(%c)'
#   34: <class 'str'>	'%c[:]'
#   35: <class 'str'>	'%c[%p:]'
#   36: <class 'int'>	100
#   37: <class 'str'>	'%c[:%p]'
#   38: <class 'str'>	'%c[%p:%p]'
#   39: <class 'int'>	2
#   40: <class 'str'>	'%{pattr}'
#   41: <class 'str'>	'%c.%[1]{pattr}'
#   42: <class 'str'>	'locals()'
#   43: <class 'str'>	'%|del %{pattr}\n'
#   44: <class 'str'>	'%|del %c[%c]\n'
#   45: <class 'str'>	'%c[%p]'
#   46: <class 'str'>	'%c[%c]'
#   47: <class 'str'>	'%C%,'
#   48: <class 'int'>	5
#   49: <class 'str'>	', '
#   50: <class 'str'>	'(%C%,)'
#   51: <class 'int'>	10
#   52: <class 'str'>	'[%C]'
#   53: <class 'int'>	15
#   54: <class 'str'>	'%P'
#   55: <class 'str'>	'%c'
#   56: <class 'str'>	' for %c in %c%c'
#   57: <class 'int'>	3
#   58: <class 'str'>	' if %c%c'
#   59: <class 'str'>	' if not %p%c'
#   60: <class 'int'>	22
#   61: <class 'str'>	''
#   62: <class 'str'>	'%c:%c'
#   63: <class 'str'>	'%|%c = %p\n'
#   64: <class 'int'>	200
#   65: <class 'str'>	'%|%c %c %c\n'
#   66: <class 'str'>	'%|%c.%[2]{pattr} %c %c\n'
#   67: <class 'int'>	4
#   68: <class 'str'>	'%c = %c'
#   69: <class 'str'>	'%c and %c'
#   70: <class 'str'>	'%c or %c'
#   71: <class 'str'>	'%p if %p else %p'
#   72: <class 'int'>	27
#   73: <class 'str'>	'%p if 1 else %p'
#   74: <class 'str'>	'%p if not %p else %p'
#   75: <class 'str'>	'(%c if %c else %c)'
#   76: <class 'str'>	'%p %[-1]{pattr} %p'
#   77: <class 'int'>	19
#   78: <class 'str'>	'%p %p'
#   79: <class 'int'>	29
#   80: <class 'int'>	30
#   81: <class 'str'>	'%[3]{pattr} %p %p'
#   82: <class 'str'>	'%[1]{pattr} %p'
#   83: <class 'str'>	'\n\n%|def %c\n'
#   84: <class 'str'>	'\n\n%c'
#   85: <class 'str'>	'%|@%c\n%c'
#   86: <class 'str'>	'%|def %c\n'
#   87: <class 'str'>	'%[0]{pattr}=%c'
#   88: <class 'str'>	'%D'
#   89: <class 'int'>	10000
#   90: <class 'str'>	'%|print %c%c,\n'
#   91: <class 'str'>	'%|print %c%c\n'
#   92: <class 'str'>	', %c'
#   93: <class 'str'>	'%|print\n'
#   94: <class 'str'>	'%|print >> %c, %c,\n'
#   95: <class 'str'>	'%|print >> %c, %c\n'
#   96: <class 'str'>	'%|print >> %c\n'
#   97: <class 'str'>	'%C'
#   98: <class 'str'>	'%c: %c'
#   99: <class 'tuple'>	('BINARY_ADD', 'BINARY_SUBTRACT', 'BINARY_MULTIPLY', 'BINARY_DIVIDE', 'BINARY_MATRIX_MULTIPLY', 'BINARY_TRUE_DIVIDE', 'BINARY_FLOOR_DIVIDE', 'BINARY_MODULO', 'BINARY_POWER', 'BINARY_LSHIFT', 'BINARY_RSHIFT', 'BINARY_AND', 'BINARY_OR', 'BINARY_XOR', 'INPLACE_ADD', 'INPLACE_SUBTRACT', 'INPLACE_MULTIPLY', 'INPLACE_MATRIX_MULTIPLY', 'INPLACE_DIVIDE', 'INPLACE_TRUE_DIVIDE', 'INPLACE_FLOOR_DIVIDE', 'INPLACE_MODULO', 'INPLACE_POWER', 'INPLACE_LSHIFT', 'INPLACE_RSHIFT', 'INPLACE_AND', 'INPLACE_OR', 'INPLACE_XOR', 'binary_expr', 'UNARY_POSITIVE', 'UNARY_NEGATIVE', 'UNARY_INVERT', 'unary_expr', 'unary_not', 'unary_convert', 'get_iter', 'slice0', 'slice1', 'slice2', 'slice3', 'IMPORT_FROM', 'load_attr', 'LOAD_FAST', 'LOAD_NAME', 'LOAD_CLASSNAME', 'LOAD_GLOBAL', 'LOAD_DEREF', 'LOAD_LOCALS', 'LOAD_ASSERT', 'DELETE_FAST', 'DELETE_NAME', 'DELETE_GLOBAL', 'delete_subscr', 'binary_subscr', 'binary_subscr2', 'store_subscr', 'STORE_FAST', 'STORE_NAME', 'STORE_GLOBAL', 'STORE_DEREF', 'unpack', 'unpack_w_parens', 'unpack_list', 'build_tuple2', 'list_iter', 'list_for', 'list_if', 'list_if_not', 'lc_body', 'comp_body', 'set_comp_body', 'gen_comp_body', 'dict_comp_body', 'assign', 'augassign1', 'augassign2', 'designList', 'and', 'ret_and', 'and2', 'or', 'ret_or', 'conditional', 'conditionalTrue', 'ret_cond', 'conditionalnot', 'ret_cond_not', 'conditional_lambda', 'return_lambda', 'compare', 'cmp_list', 'cmp_list1', 'cmp_list2', 'funcdef', 'funcdefdeco', 'mkfuncdeco', 'mkfuncdeco0', 'classdefdeco', 'classdefdeco1', 'kwarg', 'kwargs', 'assert_expr_or', 'assert_expr_and', 'print_items_stmt', 'print_items_nl_stmt', 'print_item', 'print_nl', 'print_to', 'print_to_nl', 'print_nl_to', 'print_to_items', 'kv', 'kv2')
#  100: <class 'NoneType'>	None
#  101: <class 'tuple'>	('+',)
#  102: <class 'tuple'>	('-',)
#  103: <class 'tuple'>	('*',)
#  104: <class 'tuple'>	('/',)
#  105: <class 'tuple'>	('@',)
#  106: <class 'tuple'>	('/',)
#  107: <class 'tuple'>	('//',)
#  108: <class 'tuple'>	('%%',)
#  109: <class 'tuple'>	('**',)
#  110: <class 'tuple'>	('<<',)
#  111: <class 'tuple'>	('>>',)
#  112: <class 'tuple'>	('&',)
#  113: <class 'tuple'>	('|',)
#  114: <class 'tuple'>	('^',)
#  115: <class 'tuple'>	('+=',)
#  116: <class 'tuple'>	('-=',)
#  117: <class 'tuple'>	('*=',)
#  118: <class 'tuple'>	('@=',)
#  119: <class 'tuple'>	('/=',)
#  120: <class 'tuple'>	('/=',)
#  121: <class 'tuple'>	('//=',)
#  122: <class 'tuple'>	('%%=',)
#  123: <class 'tuple'>	('**=',)
#  124: <class 'tuple'>	('<<=',)
#  125: <class 'tuple'>	('>>=',)
#  126: <class 'tuple'>	('&=',)
#  127: <class 'tuple'>	('|=',)
#  128: <class 'tuple'>	('^=',)
#  129: <class 'int'>	-1
#  130: <class 'tuple'>	('%c %c %c', 0, -1, 1)
#  131: <class 'tuple'>	('+',)
#  132: <class 'tuple'>	('-',)
#  133: <class 'tuple'>	('%c%c', 1, 0)
#  134: <class 'tuple'>	('not %c', 0)
#  135: <class 'tuple'>	('`%c`', 0)
#  136: <class 'tuple'>	('iter(%c)', 0)
#  137: <class 'tuple'>	('%c[:]', 0)
#  138: <class 'tuple'>	(1, 100)
#  139: <class 'tuple'>	('%c[%p:]', 0, (1, 100))
#  140: <class 'tuple'>	(1, 100)
#  141: <class 'tuple'>	('%c[:%p]', 0, (1, 100))
#  142: <class 'tuple'>	(1, 100)
#  143: <class 'tuple'>	(2, 100)
#  144: <class 'tuple'>	('%c[%p:%p]', 0, (1, 100), (2, 100))
#  145: <class 'tuple'>	('%{pattr}',)
#  146: <class 'tuple'>	('%c.%[1]{pattr}', 0)
#  147: <class 'tuple'>	('%{pattr}',)
#  148: <class 'tuple'>	('%{pattr}',)
#  149: <class 'tuple'>	('%{pattr}',)
#  150: <class 'tuple'>	('%{pattr}',)
#  151: <class 'tuple'>	('%{pattr}',)
#  152: <class 'tuple'>	('locals()',)
#  153: <class 'tuple'>	('%{pattr}',)
#  154: <class 'tuple'>	('%|del %{pattr}\n',)
#  155: <class 'tuple'>	('%|del %{pattr}\n',)
#  156: <class 'tuple'>	('%|del %{pattr}\n',)
#  157: <class 'tuple'>	('%|del %c[%c]\n', 0, 1)
#  158: <class 'tuple'>	(1, 100)
#  159: <class 'tuple'>	('%c[%p]', 0, (1, 100))
#  160: <class 'tuple'>	(1, 100)
#  161: <class 'tuple'>	('%c[%p]', 0, (1, 100))
#  162: <class 'tuple'>	('%c[%c]', 0, 1)
#  163: <class 'tuple'>	('%{pattr}',)
#  164: <class 'tuple'>	('%{pattr}',)
#  165: <class 'tuple'>	('%{pattr}',)
#  166: <class 'tuple'>	('%{pattr}',)
#  167: <class 'tuple'>	(1, 5, ', ')
#  168: <class 'tuple'>	('%C%,', (1, 5, ', '))
#  169: <class 'tuple'>	(1, 10, ', ')
#  170: <class 'tuple'>	('(%C%,)', (1, 10, ', '))
#  171: <class 'tuple'>	(1, 15, ', ')
#  172: <class 'tuple'>	('[%C]', (1, 15, ', '))
#  173: <class 'int'>	-1
#  174: <class 'tuple'>	(0, -1, ', ', 100)
#  175: <class 'tuple'>	('%P', (0, -1, ', ', 100))
#  176: <class 'tuple'>	('%c', 0)
#  177: <class 'tuple'>	(' for %c in %c%c', 2, 0, 3)
#  178: <class 'tuple'>	(' if %c%c', 0, 2)
#  179: <class 'tuple'>	(0, 22)
#  180: <class 'tuple'>	(' if not %p%c', (0, 22), 2)
#  181: <class 'tuple'>	('',)
#  182: <class 'tuple'>	('',)
#  183: <class 'tuple'>	('%c', 0)
#  184: <class 'tuple'>	('%c', 0)
#  185: <class 'tuple'>	('%c:%c', 1, 0)
#  186: <class 'int'>	-1
#  187: <class 'tuple'>	(0, 200)
#  188: <class 'tuple'>	('%|%c = %p\n', -1, (0, 200))
#  189: <class 'tuple'>	('%|%c %c %c\n', 0, 2, 1)
#  190: <class 'int'>	-3
#  191: <class 'int'>	-4
#  192: <class 'tuple'>	('%|%c.%[2]{pattr} %c %c\n', 0, -3, -4)
#  193: <class 'int'>	-1
#  194: <class 'tuple'>	('%c = %c', 0, -1)
#  195: <class 'tuple'>	('%c and %c', 0, 2)
#  196: <class 'tuple'>	('%c and %c', 0, 2)
#  197: <class 'tuple'>	('%c', 3)
#  198: <class 'tuple'>	('%c or %c', 0, 2)
#  199: <class 'tuple'>	('%c or %c', 0, 2)
#  200: <class 'tuple'>	(2, 27)
#  201: <class 'tuple'>	(0, 27)
#  202: <class 'tuple'>	(4, 27)
#  203: <class 'tuple'>	('%p if %p else %p', (2, 27), (0, 27), (4, 27))
#  204: <class 'tuple'>	(0, 27)
#  205: <class 'tuple'>	(2, 27)
#  206: <class 'tuple'>	('%p if 1 else %p', (0, 27), (2, 27))
#  207: <class 'tuple'>	(2, 27)
#  208: <class 'tuple'>	(0, 27)
#  209: <class 'int'>	-1
#  210: <class 'tuple'>	(-1, 27)
#  211: <class 'tuple'>	('%p if %p else %p', (2, 27), (0, 27), (-1, 27))
#  212: <class 'tuple'>	(2, 27)
#  213: <class 'tuple'>	(0, 22)
#  214: <class 'tuple'>	(4, 27)
#  215: <class 'tuple'>	('%p if not %p else %p', (2, 27), (0, 22), (4, 27))
#  216: <class 'tuple'>	(2, 27)
#  217: <class 'tuple'>	(0, 22)
#  218: <class 'int'>	-1
#  219: <class 'tuple'>	(-1, 27)
#  220: <class 'tuple'>	('%p if not %p else %p', (2, 27), (0, 22), (-1, 27))
#  221: <class 'tuple'>	('(%c if %c else %c)', 2, 0, 3)
#  222: <class 'tuple'>	('%c', 0)
#  223: <class 'tuple'>	(0, 19)
#  224: <class 'tuple'>	(1, 19)
#  225: <class 'tuple'>	('%p %[-1]{pattr} %p', (0, 19), (1, 19))
#  226: <class 'tuple'>	(0, 29)
#  227: <class 'tuple'>	(1, 30)
#  228: <class 'tuple'>	('%p %p', (0, 29), (1, 30))
#  229: <class 'tuple'>	(0, 19)
#  230: <class 'int'>	-2
#  231: <class 'tuple'>	(-2, 19)
#  232: <class 'tuple'>	('%[3]{pattr} %p %p', (0, 19), (-2, 19))
#  233: <class 'tuple'>	(0, 19)
#  234: <class 'tuple'>	('%[1]{pattr} %p', (0, 19))
#  235: <class 'int'>	-2
#  236: <class 'tuple'>	('\n\n%|def %c\n', -2)
#  237: <class 'tuple'>	('\n\n%c', 0)
#  238: <class 'tuple'>	('%|@%c\n%c', 0, 1)
#  239: <class 'tuple'>	('%|def %c\n', 0)
#  240: <class 'tuple'>	('\n\n%c', 0)
#  241: <class 'tuple'>	('%|@%c\n%c', 0, 1)
#  242: <class 'tuple'>	('%[0]{pattr}=%c', 1)
#  243: <class 'tuple'>	(0, 10000, ', ')
#  244: <class 'tuple'>	('%D', (0, 10000, ', '))
#  245: <class 'tuple'>	('%c or %c', 0, 2)
#  246: <class 'tuple'>	('%c and %c', 0, 2)
#  247: <class 'tuple'>	('%|print %c%c,\n', 0, 2)
#  248: <class 'tuple'>	('%|print %c%c\n', 0, 2)
#  249: <class 'tuple'>	(', %c', 0)
#  250: <class 'tuple'>	('%|print\n',)
#  251: <class 'tuple'>	('%|print >> %c, %c,\n', 0, 1)
#  252: <class 'tuple'>	('%|print >> %c, %c\n', 0, 1)
#  253: <class 'tuple'>	('%|print >> %c\n', 0)
#  254: <class 'tuple'>	(0, 2, ', ')
#  255: <class 'tuple'>	('%C', (0, 2, ', '))
#  256: <class 'tuple'>	('%c: %c', 3, 1)
#  257: <class 'tuple'>	('%c: %c', 1, 2)
# Names:
#    0: TABLE_DIRECT
  2:           0 LOAD_CONST              101 (('+',))

  3:           2 LOAD_CONST              102 (('-',))

  4:           4 LOAD_CONST              103 (('*',))

  5:           6 LOAD_CONST              104 (('/',))

  6:           8 LOAD_CONST              105 (('@',))

  7:          10 LOAD_CONST              106 (('/',))

  8:          12 LOAD_CONST              107 (('//',))

  9:          14 LOAD_CONST              108 (('%%',))

 10:          16 LOAD_CONST              109 (('**',))

 11:          18 LOAD_CONST              110 (('<<',))

 12:          20 LOAD_CONST              111 (('>>',))

 13:          22 LOAD_CONST              112 (('&',))

 14:          24 LOAD_CONST              113 (('|',))

 15:          26 LOAD_CONST              114 (('^',))

 16:          28 LOAD_CONST              115 (('+=',))

 17:          30 LOAD_CONST              116 (('-=',))

 18:          32 LOAD_CONST              117 (('*=',))

 19:          34 LOAD_CONST              118 (('@=',))

 20:          36 LOAD_CONST              119 (('/=',))

 21:          38 LOAD_CONST              120 (('/=',))

 22:          40 LOAD_CONST              121 (('//=',))

 23:          42 LOAD_CONST              122 (('%%=',))

 24:          44 LOAD_CONST              123 (('**=',))

 25:          46 LOAD_CONST              124 (('<<=',))

 26:          48 LOAD_CONST              125 (('>>=',))

 27:          50 LOAD_CONST              126 (('&=',))

 28:          52 LOAD_CONST              127 (('|=',))

 29:          54 LOAD_CONST              128 (('^=',))

 30:          56 LOAD_CONST              130 (('%c %c %c', 0, -1, 1))

 32:          58 LOAD_CONST              131 (('+',))

 33:          60 LOAD_CONST              132 (('-',))

 34:          62 LOAD_CONST               29 ('~%c')

 35:          64 LOAD_CONST              133 (('%c%c', 1, 0))

 37:          66 LOAD_CONST              134 (('not %c', 0))

 38:          68 LOAD_CONST              135 (('`%c`', 0))

 39:          70 LOAD_CONST              136 (('iter(%c)', 0))

 40:          72 LOAD_CONST              137 (('%c[:]', 0))

 41:          74 LOAD_CONST              139 (('%c[%p:]', 0, (1, 100)))

 42:          76 LOAD_CONST              141 (('%c[:%p]', 0, (1, 100)))

 43:          78 LOAD_CONST              144 (('%c[%p:%p]', 0, (1, 100), (2, 100)))

 45:          80 LOAD_CONST              145 (('%{pattr}',))

 46:          82 LOAD_CONST              146 (('%c.%[1]{pattr}', 0))

 47:          84 LOAD_CONST              147 (('%{pattr}',))

 48:          86 LOAD_CONST              148 (('%{pattr}',))

 49:          88 LOAD_CONST              149 (('%{pattr}',))

 50:          90 LOAD_CONST              150 (('%{pattr}',))

 51:          92 LOAD_CONST              151 (('%{pattr}',))

 52:          94 LOAD_CONST              152 (('locals()',))

 53:          96 LOAD_CONST              153 (('%{pattr}',))

 54:          98 LOAD_CONST              154 (('%|del %{pattr}\n',))

 55:         100 LOAD_CONST              155 (('%|del %{pattr}\n',))

 56:         102 LOAD_CONST              156 (('%|del %{pattr}\n',))

 57:         104 LOAD_CONST              157 (('%|del %c[%c]\n', 0, 1))

 58:         106 LOAD_CONST              159 (('%c[%p]', 0, (1, 100)))

 59:         108 LOAD_CONST              161 (('%c[%p]', 0, (1, 100)))

 60:         110 LOAD_CONST              162 (('%c[%c]', 0, 1))

 61:         112 LOAD_CONST              163 (('%{pattr}',))

 62:         114 LOAD_CONST              164 (('%{pattr}',))

 63:         116 LOAD_CONST              165 (('%{pattr}',))

 64:         118 LOAD_CONST              166 (('%{pattr}',))

 65:         120 LOAD_CONST              168 (('%C%,', (1, 5, ', ')))

 66:         122 LOAD_CONST              170 (('(%C%,)', (1, 10, ', ')))

 68:         124 LOAD_CONST              172 (('[%C]', (1, 15, ', ')))

 69:         126 LOAD_CONST              175 (('%P', (0, -1, ', ', 100)))

 71:         128 LOAD_CONST              176 (('%c', 0))

 72:         130 LOAD_CONST              177 ((' for %c in %c%c', 2, 0, 3))

 73:         132 LOAD_CONST              178 ((' if %c%c', 0, 2))

 74:         134 LOAD_CONST              180 ((' if not %p%c', (0, 22), 2))

 75:         136 LOAD_CONST              181 (('',))

 77:         138 LOAD_CONST              182 (('',))

 78:         140 LOAD_CONST              183 (('%c', 0))

 79:         142 LOAD_CONST              184 (('%c', 0))

 80:         144 LOAD_CONST              185 (('%c:%c', 1, 0))

 82:         146 LOAD_CONST              188 (('%|%c = %p\n', -1, (0, 200)))

 84:         148 LOAD_CONST              189 (('%|%c %c %c\n', 0, 2, 1))

 86:         150 LOAD_CONST              192 (('%|%c.%[2]{pattr} %c %c\n', 0, -3, -4))

 87:         152 LOAD_CONST              194 (('%c = %c', 0, -1))

 88:         154 LOAD_CONST              195 (('%c and %c', 0, 2))

 89:         156 LOAD_CONST              196 (('%c and %c', 0, 2))

 90:         158 LOAD_CONST              197 (('%c', 3))

 91:         160 LOAD_CONST              198 (('%c or %c', 0, 2))

 92:         162 LOAD_CONST              199 (('%c or %c', 0, 2))

 93:         164 LOAD_CONST              203 (('%p if %p else %p', (2, 27), (0, 27), (4, 27)))

 94:         166 LOAD_CONST              206 (('%p if 1 else %p', (0, 27), (2, 27)))

 95:         168 LOAD_CONST              211 (('%p if %p else %p', (2, 27), (0, 27), (-1, 27)))

 96:         170 LOAD_CONST              215 (('%p if not %p else %p', (2, 27), (0, 22), (4, 27)))

 97:         172 LOAD_CONST              220 (('%p if not %p else %p', (2, 27), (0, 22), (-1, 27)))

 98:         174 LOAD_CONST              221 (('(%c if %c else %c)', 2, 0, 3))

 99:         176 LOAD_CONST              222 (('%c', 0))

100:         178 LOAD_CONST              225 (('%p %[-1]{pattr} %p', (0, 19), (1, 19)))

101:         180 LOAD_CONST              228 (('%p %p', (0, 29), (1, 30)))

102:         182 LOAD_CONST              232 (('%[3]{pattr} %p %p', (0, 19), (-2, 19)))

103:         184 LOAD_CONST              234 (('%[1]{pattr} %p', (0, 19)))

104:         186 LOAD_CONST              236 (('\n\n%|def %c\n', -2))

105:         188 LOAD_CONST              237 (('\n\n%c', 0))

106:         190 LOAD_CONST              238 (('%|@%c\n%c', 0, 1))

107:         192 LOAD_CONST              239 (('%|def %c\n', 0))

108:         194 LOAD_CONST              240 (('\n\n%c', 0))

109:         196 LOAD_CONST              241 (('%|@%c\n%c', 0, 1))

110:         198 LOAD_CONST              242 (('%[0]{pattr}=%c', 1))

111:         200 LOAD_CONST              244 (('%D', (0, 10000, ', ')))

113:         202 LOAD_CONST              245 (('%c or %c', 0, 2))

114:         204 LOAD_CONST              246 (('%c and %c', 0, 2))

115:         206 LOAD_CONST              247 (('%|print %c%c,\n', 0, 2))

116:         208 LOAD_CONST              248 (('%|print %c%c\n', 0, 2))

117:         210 LOAD_CONST              249 ((', %c', 0))

118:         212 LOAD_CONST              250 (('%|print\n',))

119:         214 LOAD_CONST              251 (('%|print >> %c, %c,\n', 0, 1))

120:         216 LOAD_CONST              252 (('%|print >> %c, %c\n', 0, 1))

121:         218 LOAD_CONST              253 (('%|print >> %c\n', 0))

122:         220 LOAD_CONST              255 (('%C', (0, 2, ', ')))

123:         222 EXTENDED_ARG              1 (256)
             224 LOAD_CONST              256 (('%c: %c', 3, 1))

124:         226 EXTENDED_ARG              1 (256)
             228 LOAD_CONST              257 (('%c: %c', 1, 2))
             230 LOAD_CONST               99 (('BINARY_ADD', 'BINARY_SUBTRACT', 'BINARY_MULTIPLY', 'BINARY_DIVIDE', 'BINARY_MATRIX_MULTIPLY', 'BINARY_TRUE_DIVIDE', 'BINARY_FLOOR_DIVIDE', 'BINARY_MODULO', 'BINARY_POWER', 'BINARY_LSHIFT', 'BINARY_RSHIFT', 'BINARY_AND', 'BINARY_OR', 'BINARY_XOR', 'INPLACE_ADD', 'INPLACE_SUBTRACT', 'INPLACE_MULTIPLY', 'INPLACE_MATRIX_MULTIPLY', 'INPLACE_DIVIDE', 'INPLACE_TRUE_DIVIDE', 'INPLACE_FLOOR_DIVIDE', 'INPLACE_MODULO', 'INPLACE_POWER', 'INPLACE_LSHIFT', 'INPLACE_RSHIFT', 'INPLACE_AND', 'INPLACE_OR', 'INPLACE_XOR', 'binary_expr', 'UNARY_POSITIVE', 'UNARY_NEGATIVE', 'UNARY_INVERT', 'unary_expr', 'unary_not', 'unary_convert', 'get_iter', 'slice0', 'slice1', 'slice2', 'slice3', 'IMPORT_FROM', 'load_attr', 'LOAD_FAST', 'LOAD_NAME', 'LOAD_CLASSNAME', 'LOAD_GLOBAL', 'LOAD_DEREF', 'LOAD_LOCALS', 'LOAD_ASSERT', 'DELETE_FAST', 'DELETE_NAME', 'DELETE_GLOBAL', 'delete_subscr', 'binary_subscr', 'binary_subscr2', 'store_subscr', 'STORE_FAST', 'STORE_NAME', 'STORE_GLOBAL', 'STORE_DEREF', 'unpack', 'unpack_w_parens', 'unpack_list', 'build_tuple2', 'list_iter', 'list_for', 'list_if', 'list_if_not', 'lc_body', 'comp_body', 'set_comp_body', 'gen_comp_body', 'dict_comp_body', 'assign', 'augassign1', 'augassign2', 'designList', 'and', 'ret_and', 'and2', 'or', 'ret_or', 'conditional', 'conditionalTrue', 'ret_cond', 'conditionalnot', 'ret_cond_not', 'conditional_lambda', 'return_lambda', 'compare', 'cmp_list', 'cmp_list1', 'cmp_list2', 'funcdef', 'funcdefdeco', 'mkfuncdeco', 'mkfuncdeco0', 'classdefdeco', 'classdefdeco1', 'kwarg', 'kwargs', 'assert_expr_or', 'assert_expr_and', 'print_items_stmt', 'print_items_nl_stmt', 'print_item', 'print_nl', 'print_to', 'print_to_nl', 'print_nl_to', 'print_to_items', 'kv', 'kv2'))
             232 BUILD_CONST_KEY_MAP     113
             234 STORE_NAME                0 (TABLE_DIRECT)
             236 LOAD_CONST              100 (None)
             238 RETURN_VALUE

